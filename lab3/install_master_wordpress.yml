---
# Ansible playbook для установки WordPress на master-узле с Docker Compose
# Использовать данный плейбук для установки Master mysql реплики 
# УБРАЛ SHELL и COMMAND, так как использую только модули
- name: Развертывание WordPress в Docker-контейнерах на Ubuntu
  hosts: mysql_master  # Мастер-узел MySQL
  become: yes  # Выполнять задачи от имени root (sudo)
  vars:
    mysql_root_password: rootpassword
    mysql_user: wp_user
    mysql_password: wp_password
    mysql_database: wordpress
    replication_user: replication
    replication_password: replication_password
    docker_compose_dir: /opt/wordpress-master  # Директория установки WordPress
    mysql_port: 3306
    root_user_name: root
    root_user_pass: rootpassword

  tasks:
    # Обновление системы и установка базовых зависимостей
    - name: Обновление кэша APT и установка необходимых пакетов
      apt:
        update_cache: yes
        name:
          - apt-transport-https
          - software-properties-common
          - python3-docker
          - python3-pymysql
        state: present
    
#    - name: Установка Python модуля для Docker ---->>>
# >>>---- Замена выше на python3-docker и python3-pymysql -----<<<<<
#      pip:
#        name: 
#        - docker
#        - PyMySQL
#        executable: pip3
#        state: present

    # Создание директории для WordPress
    - name: Создание директории для WordPress (docker compose)
      file:
        path: "{{ docker_compose_dir }}"
        state: directory
        mode: "0755"
    
    - name: Копирование mysql-master.cnf
      template:
        src: "files/mysql-master.cnf"
        dest: "{{ docker_compose_dir }}/mysql-master.cnf"
        mode: '0644'

    - name: Копирование exp.cnf
      template:
        src: "files/exp.cnf"
        dest: "{{ docker_compose_dir }}/exp.cnf"
        mode: '0644'

    - name: Копирование nginx.conf
      template:
        src: "templates/nginx.conf"
        dest: "{{ docker_compose_dir }}/nginx.conf"
        mode: "0744"


    # Копирование docker-compose.yml
    - name: Копирование docker-compose-master.yml
      template:
        src: "templates/docker-compose-master.yml"
        dest: "{{ docker_compose_dir }}/docker-compose-master.yml"
        mode: "0744"


# ------------------Для теста----------------------
#    - name: Остановка всех контейнеров
#      community.docker.docker_compose_v2:
#        project_src: "{{ docker_compose_dir }}"
#        files:
#          - docker-compose-master.yml
#        state: absent

#    - name: Очистка Docker системы
#      community.docker.docker_prune:
#        images: true
#        images_filters:
#          dangling: false
#        networks: true
#        volumes: true
#        builder_cache: true
#---------------------------------------------------


    # Запуск контейнеров через Docker Compose
    - name: Запуск Docker Compose
      community.docker.docker_compose_v2:
        project_src: "{{ docker_compose_dir }}"
        files:
          - docker-compose-master.yml
        build: always
        state: present  
    
    # Ожидание доступности MySQL
    - name: Проверка доступности MySQL
      wait_for:
        port: "{{ mysql_port }}"
        delay: 10
        timeout: 300

    # Проверка статуса контейнеров
    - name: Проверка запущенных контейнеров
      docker_host_info:
        containers: yes
      register: all_containers

    # Вывод информации о контейнерах из переменной all_containers
    - name: Вывод статуса контейнеров
      debug:
        msg:  
          - "Контейнер: {{ item.Names[0][1:] }}"
          - "Образ: {{ item.Image}}"
          - "Статус: {{ item.Status }}"
      loop: "{{ all_containers.containers }}"
      loop_control:
        label: "{{ item.Names[0] }}" # Сделал чтобы сократить вывод
        

# Создание replication user и получение master status

    - name: Создание replication user
      community.mysql.mysql_user:
        login_host: "{{ ansible_host }}"
        login_port: "{{ mysql_port }}"  
        login_user: "{{ root_user_name }}"
        login_password: "{{ root_user_pass }}"
        name: "{{ replication_user }}"
        password: "{{ replication_password }}"
        host: '%'
        priv: '*.*:REPLICATION SLAVE'
        state: present

    # Проверка master status
    - name: Получение master status
      community.mysql.mysql_query:
        login_host: "{{ ansible_host }}"
        login_port: "{{ mysql_port }}"
        login_user: "{{ root_user_name }}"
        login_password: "{{ root_user_pass }}"
        query: "SHOW MASTER STATUS"
      register: master_status
      changed_when: false

# Было для теста
#    - name: Показать статус мастера
#      debug:
#        var: master_status.query_result

    - name: Сохранение информации о мастере
      set_fact:
        master_log_file: "{{ master_status.query_result[0][0].File }}"
        master_log_pos: "{{ master_status.query_result[0][0].Position }}"

    - name: Сохранение информации о мастере в файл
      copy:
        dest: "{{ docker_compose_dir }}/master_info.txt"
        content: |
          MASTER_HOST={{ ansible_host }}
          MASTER_USER={{ replication_user }}
          MASTER_PASSWORD={{ replication_password }}
          MASTER_LOG_FILE={{ master_log_file }}
          MASTER_LOG_POS={{ master_log_pos }}
        mode: '0644'

    - name: Вывод информации о мастере
      debug:
        msg: 
          - "Master host: {{ ansible_host }}"
          - "Master log file: {{ master_log_file }}"
          - "Master log position: {{ master_log_pos }}"